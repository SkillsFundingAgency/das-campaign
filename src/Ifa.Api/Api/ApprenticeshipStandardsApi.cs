/* 
 * IfA Standards API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Ifa.Api.Client;
using Ifa.Api.Model;

namespace Ifa.Api.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IApprenticeshipStandardsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get an Apprenticeship Standard by the given ID (LARS Code)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ifa.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Standard ID</param>
        /// <returns>ApiApprenticeshipStandard</returns>
        ApiApprenticeshipStandard ApprenticeshipStandardsGet (int id);

        /// <summary>
        /// Get an Apprenticeship Standard by the given ID (LARS Code)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ifa.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Standard ID</param>
        /// <returns>ApiResponse of ApiApprenticeshipStandard</returns>
        ApiResponse<ApiApprenticeshipStandard> ApprenticeshipStandardsGetWithHttpInfo (int id);
        /// <summary>
        /// Get an Apprenticeship Standard by the given ID (LARS Code)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ifa.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Standard ID</param>
        /// <returns>ApiApprenticeshipStandard</returns>
        ApiApprenticeshipStandard ApprenticeshipStandardsGet_0 (int id);

        /// <summary>
        /// Get an Apprenticeship Standard by the given ID (LARS Code)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ifa.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Standard ID</param>
        /// <returns>ApiResponse of ApiApprenticeshipStandard</returns>
        ApiResponse<ApiApprenticeshipStandard> ApprenticeshipStandardsGet_0WithHttpInfo (int id);
        /// <summary>
        /// Get an Apprenticeship Standard by the given Reference Number
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ifa.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="referenceNumber">Reference Number</param>
        /// <returns>ApiApprenticeshipStandard</returns>
        ApiApprenticeshipStandard ApprenticeshipStandardsGet_1 (string referenceNumber);

        /// <summary>
        /// Get an Apprenticeship Standard by the given Reference Number
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ifa.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="referenceNumber">Reference Number</param>
        /// <returns>ApiResponse of ApiApprenticeshipStandard</returns>
        ApiResponse<ApiApprenticeshipStandard> ApprenticeshipStandardsGet_1WithHttpInfo (string referenceNumber);
        /// <summary>
        /// Get an Apprenticeship Standard by the given Reference Number
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ifa.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="referenceNumber">Reference Number</param>
        /// <returns>ApiApprenticeshipStandard</returns>
        ApiApprenticeshipStandard ApprenticeshipStandardsGet_2 (string referenceNumber);

        /// <summary>
        /// Get an Apprenticeship Standard by the given Reference Number
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ifa.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="referenceNumber">Reference Number</param>
        /// <returns>ApiResponse of ApiApprenticeshipStandard</returns>
        ApiResponse<ApiApprenticeshipStandard> ApprenticeshipStandardsGet_2WithHttpInfo (string referenceNumber);
        /// <summary>
        /// Gets a list of all Apprenticeship Standards
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ifa.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;ApiApprenticeshipStandard&gt;</returns>
        List<ApiApprenticeshipStandard> ApprenticeshipStandardsGet_3 ();

        /// <summary>
        /// Gets a list of all Apprenticeship Standards
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ifa.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;ApiApprenticeshipStandard&gt;</returns>
        ApiResponse<List<ApiApprenticeshipStandard>> ApprenticeshipStandardsGet_3WithHttpInfo ();
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IApprenticeshipStandardsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get an Apprenticeship Standard by the given ID (LARS Code)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ifa.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Standard ID</param>
        /// <returns>Task of ApiApprenticeshipStandard</returns>
        System.Threading.Tasks.Task<ApiApprenticeshipStandard> ApprenticeshipStandardsGetAsync (int id);

        /// <summary>
        /// Get an Apprenticeship Standard by the given ID (LARS Code)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ifa.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Standard ID</param>
        /// <returns>Task of ApiResponse (ApiApprenticeshipStandard)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiApprenticeshipStandard>> ApprenticeshipStandardsGetAsyncWithHttpInfo (int id);
        /// <summary>
        /// Get an Apprenticeship Standard by the given ID (LARS Code)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ifa.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Standard ID</param>
        /// <returns>Task of ApiApprenticeshipStandard</returns>
        System.Threading.Tasks.Task<ApiApprenticeshipStandard> ApprenticeshipStandardsGet_0Async (int id);

        /// <summary>
        /// Get an Apprenticeship Standard by the given ID (LARS Code)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ifa.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Standard ID</param>
        /// <returns>Task of ApiResponse (ApiApprenticeshipStandard)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiApprenticeshipStandard>> ApprenticeshipStandardsGet_0AsyncWithHttpInfo (int id);
        /// <summary>
        /// Get an Apprenticeship Standard by the given Reference Number
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ifa.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="referenceNumber">Reference Number</param>
        /// <returns>Task of ApiApprenticeshipStandard</returns>
        System.Threading.Tasks.Task<ApiApprenticeshipStandard> ApprenticeshipStandardsGet_1Async (string referenceNumber);

        /// <summary>
        /// Get an Apprenticeship Standard by the given Reference Number
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ifa.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="referenceNumber">Reference Number</param>
        /// <returns>Task of ApiResponse (ApiApprenticeshipStandard)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiApprenticeshipStandard>> ApprenticeshipStandardsGet_1AsyncWithHttpInfo (string referenceNumber);
        /// <summary>
        /// Get an Apprenticeship Standard by the given Reference Number
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ifa.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="referenceNumber">Reference Number</param>
        /// <returns>Task of ApiApprenticeshipStandard</returns>
        System.Threading.Tasks.Task<ApiApprenticeshipStandard> ApprenticeshipStandardsGet_2Async (string referenceNumber);

        /// <summary>
        /// Get an Apprenticeship Standard by the given Reference Number
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ifa.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="referenceNumber">Reference Number</param>
        /// <returns>Task of ApiResponse (ApiApprenticeshipStandard)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiApprenticeshipStandard>> ApprenticeshipStandardsGet_2AsyncWithHttpInfo (string referenceNumber);
        /// <summary>
        /// Gets a list of all Apprenticeship Standards
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ifa.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;ApiApprenticeshipStandard&gt;</returns>
        System.Threading.Tasks.Task<List<ApiApprenticeshipStandard>> ApprenticeshipStandardsGet_3Async ();

        /// <summary>
        /// Gets a list of all Apprenticeship Standards
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ifa.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;ApiApprenticeshipStandard&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ApiApprenticeshipStandard>>> ApprenticeshipStandardsGet_3AsyncWithHttpInfo ();
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IApprenticeshipStandardsApi : IApprenticeshipStandardsApiSync, IApprenticeshipStandardsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ApprenticeshipStandardsApi : IApprenticeshipStandardsApi
    {
        private Ifa.Api.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ApprenticeshipStandardsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ApprenticeshipStandardsApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ApprenticeshipStandardsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ApprenticeshipStandardsApi(String basePath)
        {
            this.Configuration = Ifa.Api.Client.Configuration.MergeConfigurations(
                Ifa.Api.Client.GlobalConfiguration.Instance,
                new Ifa.Api.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Ifa.Api.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Ifa.Api.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Ifa.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ApprenticeshipStandardsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ApprenticeshipStandardsApi(Ifa.Api.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Ifa.Api.Client.Configuration.MergeConfigurations(
                Ifa.Api.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Ifa.Api.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Ifa.Api.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Ifa.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PetApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ApprenticeshipStandardsApi(Ifa.Api.Client.ISynchronousClient client,Ifa.Api.Client.IAsynchronousClient asyncClient, Ifa.Api.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Ifa.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Ifa.Api.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Ifa.Api.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Ifa.Api.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Ifa.Api.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get an Apprenticeship Standard by the given ID (LARS Code) 
        /// </summary>
        /// <exception cref="Ifa.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Standard ID</param>
        /// <returns>ApiApprenticeshipStandard</returns>
        public ApiApprenticeshipStandard ApprenticeshipStandardsGet (int id)
        {
             Ifa.Api.Client.ApiResponse<ApiApprenticeshipStandard> localVarResponse = ApprenticeshipStandardsGetWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get an Apprenticeship Standard by the given ID (LARS Code) 
        /// </summary>
        /// <exception cref="Ifa.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Standard ID</param>
        /// <returns>ApiResponse of ApiApprenticeshipStandard</returns>
        public Ifa.Api.Client.ApiResponse< ApiApprenticeshipStandard > ApprenticeshipStandardsGetWithHttpInfo (int id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Ifa.Api.Client.ApiException(400, "Missing required parameter 'id' when calling ApprenticeshipStandardsApi->ApprenticeshipStandardsGet");

            Ifa.Api.Client.RequestOptions requestOptions = new Ifa.Api.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "text/html"
            };

            var localVarContentType = Ifa.Api.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Ifa.Api.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                requestOptions.PathParameters.Add("id", Ifa.Api.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request

            var response = this.Client.Get< ApiApprenticeshipStandard >("/api/apprenticeshipstandards/{id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ApprenticeshipStandardsGet", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Get an Apprenticeship Standard by the given ID (LARS Code) 
        /// </summary>
        /// <exception cref="Ifa.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Standard ID</param>
        /// <returns>Task of ApiApprenticeshipStandard</returns>
        public async System.Threading.Tasks.Task<ApiApprenticeshipStandard> ApprenticeshipStandardsGetAsync (int id)
        {
             Ifa.Api.Client.ApiResponse<ApiApprenticeshipStandard> localVarResponse = await ApprenticeshipStandardsGetAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get an Apprenticeship Standard by the given ID (LARS Code) 
        /// </summary>
        /// <exception cref="Ifa.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Standard ID</param>
        /// <returns>Task of ApiResponse (ApiApprenticeshipStandard)</returns>
        public async System.Threading.Tasks.Task<Ifa.Api.Client.ApiResponse<ApiApprenticeshipStandard>> ApprenticeshipStandardsGetAsyncWithHttpInfo (int id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Ifa.Api.Client.ApiException(400, "Missing required parameter 'id' when calling ApprenticeshipStandardsApi->ApprenticeshipStandardsGet");


            Ifa.Api.Client.RequestOptions requestOptions = new Ifa.Api.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "text/html"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (id != null)
                requestOptions.PathParameters.Add("id", Ifa.Api.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<ApiApprenticeshipStandard>("/api/apprenticeshipstandards/{id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ApprenticeshipStandardsGet", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Get an Apprenticeship Standard by the given ID (LARS Code) 
        /// </summary>
        /// <exception cref="Ifa.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Standard ID</param>
        /// <returns>ApiApprenticeshipStandard</returns>
        public ApiApprenticeshipStandard ApprenticeshipStandardsGet_0 (int id)
        {
             Ifa.Api.Client.ApiResponse<ApiApprenticeshipStandard> localVarResponse = ApprenticeshipStandardsGet_0WithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get an Apprenticeship Standard by the given ID (LARS Code) 
        /// </summary>
        /// <exception cref="Ifa.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Standard ID</param>
        /// <returns>ApiResponse of ApiApprenticeshipStandard</returns>
        public Ifa.Api.Client.ApiResponse< ApiApprenticeshipStandard > ApprenticeshipStandardsGet_0WithHttpInfo (int id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Ifa.Api.Client.ApiException(400, "Missing required parameter 'id' when calling ApprenticeshipStandardsApi->ApprenticeshipStandardsGet_0");

            Ifa.Api.Client.RequestOptions requestOptions = new Ifa.Api.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "text/html"
            };

            var localVarContentType = Ifa.Api.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Ifa.Api.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                requestOptions.PathParameters.Add("id", Ifa.Api.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request

            var response = this.Client.Head< ApiApprenticeshipStandard >("/api/apprenticeshipstandards/{id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ApprenticeshipStandardsGet_0", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Get an Apprenticeship Standard by the given ID (LARS Code) 
        /// </summary>
        /// <exception cref="Ifa.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Standard ID</param>
        /// <returns>Task of ApiApprenticeshipStandard</returns>
        public async System.Threading.Tasks.Task<ApiApprenticeshipStandard> ApprenticeshipStandardsGet_0Async (int id)
        {
             Ifa.Api.Client.ApiResponse<ApiApprenticeshipStandard> localVarResponse = await ApprenticeshipStandardsGet_0AsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get an Apprenticeship Standard by the given ID (LARS Code) 
        /// </summary>
        /// <exception cref="Ifa.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Standard ID</param>
        /// <returns>Task of ApiResponse (ApiApprenticeshipStandard)</returns>
        public async System.Threading.Tasks.Task<Ifa.Api.Client.ApiResponse<ApiApprenticeshipStandard>> ApprenticeshipStandardsGet_0AsyncWithHttpInfo (int id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Ifa.Api.Client.ApiException(400, "Missing required parameter 'id' when calling ApprenticeshipStandardsApi->ApprenticeshipStandardsGet_0");


            Ifa.Api.Client.RequestOptions requestOptions = new Ifa.Api.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "text/html"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (id != null)
                requestOptions.PathParameters.Add("id", Ifa.Api.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request

            var response = await this.AsynchronousClient.HeadAsync<ApiApprenticeshipStandard>("/api/apprenticeshipstandards/{id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ApprenticeshipStandardsGet_0", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Get an Apprenticeship Standard by the given Reference Number 
        /// </summary>
        /// <exception cref="Ifa.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="referenceNumber">Reference Number</param>
        /// <returns>ApiApprenticeshipStandard</returns>
        public ApiApprenticeshipStandard ApprenticeshipStandardsGet_1 (string referenceNumber)
        {
             Ifa.Api.Client.ApiResponse<ApiApprenticeshipStandard> localVarResponse = ApprenticeshipStandardsGet_1WithHttpInfo(referenceNumber);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get an Apprenticeship Standard by the given Reference Number 
        /// </summary>
        /// <exception cref="Ifa.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="referenceNumber">Reference Number</param>
        /// <returns>ApiResponse of ApiApprenticeshipStandard</returns>
        public Ifa.Api.Client.ApiResponse< ApiApprenticeshipStandard > ApprenticeshipStandardsGet_1WithHttpInfo (string referenceNumber)
        {
            // verify the required parameter 'referenceNumber' is set
            if (referenceNumber == null)
                throw new Ifa.Api.Client.ApiException(400, "Missing required parameter 'referenceNumber' when calling ApprenticeshipStandardsApi->ApprenticeshipStandardsGet_1");

            Ifa.Api.Client.RequestOptions requestOptions = new Ifa.Api.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "text/html"
            };

            var localVarContentType = Ifa.Api.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Ifa.Api.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (referenceNumber != null)
                requestOptions.PathParameters.Add("referenceNumber", Ifa.Api.Client.ClientUtils.ParameterToString(referenceNumber)); // path parameter


            // make the HTTP request

            var response = this.Client.Get< ApiApprenticeshipStandard >("/api/apprenticeshipstandards/{referenceNumber}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ApprenticeshipStandardsGet_1", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Get an Apprenticeship Standard by the given Reference Number 
        /// </summary>
        /// <exception cref="Ifa.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="referenceNumber">Reference Number</param>
        /// <returns>Task of ApiApprenticeshipStandard</returns>
        public async System.Threading.Tasks.Task<ApiApprenticeshipStandard> ApprenticeshipStandardsGet_1Async (string referenceNumber)
        {
             Ifa.Api.Client.ApiResponse<ApiApprenticeshipStandard> localVarResponse = await ApprenticeshipStandardsGet_1AsyncWithHttpInfo(referenceNumber);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get an Apprenticeship Standard by the given Reference Number 
        /// </summary>
        /// <exception cref="Ifa.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="referenceNumber">Reference Number</param>
        /// <returns>Task of ApiResponse (ApiApprenticeshipStandard)</returns>
        public async System.Threading.Tasks.Task<Ifa.Api.Client.ApiResponse<ApiApprenticeshipStandard>> ApprenticeshipStandardsGet_1AsyncWithHttpInfo (string referenceNumber)
        {
            // verify the required parameter 'referenceNumber' is set
            if (referenceNumber == null)
                throw new Ifa.Api.Client.ApiException(400, "Missing required parameter 'referenceNumber' when calling ApprenticeshipStandardsApi->ApprenticeshipStandardsGet_1");


            Ifa.Api.Client.RequestOptions requestOptions = new Ifa.Api.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "text/html"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (referenceNumber != null)
                requestOptions.PathParameters.Add("referenceNumber", Ifa.Api.Client.ClientUtils.ParameterToString(referenceNumber)); // path parameter


            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<ApiApprenticeshipStandard>("/api/apprenticeshipstandards/{referenceNumber}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ApprenticeshipStandardsGet_1", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Get an Apprenticeship Standard by the given Reference Number 
        /// </summary>
        /// <exception cref="Ifa.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="referenceNumber">Reference Number</param>
        /// <returns>ApiApprenticeshipStandard</returns>
        public ApiApprenticeshipStandard ApprenticeshipStandardsGet_2 (string referenceNumber)
        {
             Ifa.Api.Client.ApiResponse<ApiApprenticeshipStandard> localVarResponse = ApprenticeshipStandardsGet_2WithHttpInfo(referenceNumber);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get an Apprenticeship Standard by the given Reference Number 
        /// </summary>
        /// <exception cref="Ifa.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="referenceNumber">Reference Number</param>
        /// <returns>ApiResponse of ApiApprenticeshipStandard</returns>
        public Ifa.Api.Client.ApiResponse< ApiApprenticeshipStandard > ApprenticeshipStandardsGet_2WithHttpInfo (string referenceNumber)
        {
            // verify the required parameter 'referenceNumber' is set
            if (referenceNumber == null)
                throw new Ifa.Api.Client.ApiException(400, "Missing required parameter 'referenceNumber' when calling ApprenticeshipStandardsApi->ApprenticeshipStandardsGet_2");

            Ifa.Api.Client.RequestOptions requestOptions = new Ifa.Api.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "text/html"
            };

            var localVarContentType = Ifa.Api.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Ifa.Api.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (referenceNumber != null)
                requestOptions.PathParameters.Add("referenceNumber", Ifa.Api.Client.ClientUtils.ParameterToString(referenceNumber)); // path parameter


            // make the HTTP request

            var response = this.Client.Head< ApiApprenticeshipStandard >("/api/apprenticeshipstandards/{referenceNumber}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ApprenticeshipStandardsGet_2", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Get an Apprenticeship Standard by the given Reference Number 
        /// </summary>
        /// <exception cref="Ifa.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="referenceNumber">Reference Number</param>
        /// <returns>Task of ApiApprenticeshipStandard</returns>
        public async System.Threading.Tasks.Task<ApiApprenticeshipStandard> ApprenticeshipStandardsGet_2Async (string referenceNumber)
        {
             Ifa.Api.Client.ApiResponse<ApiApprenticeshipStandard> localVarResponse = await ApprenticeshipStandardsGet_2AsyncWithHttpInfo(referenceNumber);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get an Apprenticeship Standard by the given Reference Number 
        /// </summary>
        /// <exception cref="Ifa.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="referenceNumber">Reference Number</param>
        /// <returns>Task of ApiResponse (ApiApprenticeshipStandard)</returns>
        public async System.Threading.Tasks.Task<Ifa.Api.Client.ApiResponse<ApiApprenticeshipStandard>> ApprenticeshipStandardsGet_2AsyncWithHttpInfo (string referenceNumber)
        {
            // verify the required parameter 'referenceNumber' is set
            if (referenceNumber == null)
                throw new Ifa.Api.Client.ApiException(400, "Missing required parameter 'referenceNumber' when calling ApprenticeshipStandardsApi->ApprenticeshipStandardsGet_2");


            Ifa.Api.Client.RequestOptions requestOptions = new Ifa.Api.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "text/html"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (referenceNumber != null)
                requestOptions.PathParameters.Add("referenceNumber", Ifa.Api.Client.ClientUtils.ParameterToString(referenceNumber)); // path parameter


            // make the HTTP request

            var response = await this.AsynchronousClient.HeadAsync<ApiApprenticeshipStandard>("/api/apprenticeshipstandards/{referenceNumber}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ApprenticeshipStandardsGet_2", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Gets a list of all Apprenticeship Standards 
        /// </summary>
        /// <exception cref="Ifa.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;ApiApprenticeshipStandard&gt;</returns>
        public List<ApiApprenticeshipStandard> ApprenticeshipStandardsGet_3 ()
        {
             Ifa.Api.Client.ApiResponse<List<ApiApprenticeshipStandard>> localVarResponse = ApprenticeshipStandardsGet_3WithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a list of all Apprenticeship Standards 
        /// </summary>
        /// <exception cref="Ifa.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;ApiApprenticeshipStandard&gt;</returns>
        public Ifa.Api.Client.ApiResponse< List<ApiApprenticeshipStandard> > ApprenticeshipStandardsGet_3WithHttpInfo ()
        {
            Ifa.Api.Client.RequestOptions requestOptions = new Ifa.Api.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "text/html"
            };

            var localVarContentType = Ifa.Api.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Ifa.Api.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request

            var response = this.Client.Get< List<ApiApprenticeshipStandard> >("/api/ApprenticeshipStandards", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ApprenticeshipStandardsGet_3", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Gets a list of all Apprenticeship Standards 
        /// </summary>
        /// <exception cref="Ifa.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;ApiApprenticeshipStandard&gt;</returns>
        public async System.Threading.Tasks.Task<List<ApiApprenticeshipStandard>> ApprenticeshipStandardsGet_3Async ()
        {
             Ifa.Api.Client.ApiResponse<List<ApiApprenticeshipStandard>> localVarResponse = await ApprenticeshipStandardsGet_3AsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets a list of all Apprenticeship Standards 
        /// </summary>
        /// <exception cref="Ifa.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;ApiApprenticeshipStandard&gt;)</returns>
        public async System.Threading.Tasks.Task<Ifa.Api.Client.ApiResponse<List<ApiApprenticeshipStandard>>> ApprenticeshipStandardsGet_3AsyncWithHttpInfo ()
        {

            Ifa.Api.Client.RequestOptions requestOptions = new Ifa.Api.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "text/html"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            


            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<List<ApiApprenticeshipStandard>>("/api/ApprenticeshipStandards", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ApprenticeshipStandardsGet_3", response);
                if (exception != null) throw exception;
            }

            return response;
        }

    }
}
