/* 
 * IfA Standards API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Ifa.Api.Client.SwaggerDateConverter;

namespace Ifa.Api.Model
{
    /// <summary>
    /// TempApprenticeshipStandard
    /// </summary>
    [DataContract]
    public partial class TempApprenticeshipStandard :  IEquatable<TempApprenticeshipStandard>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TempApprenticeshipStandard" /> class.
        /// </summary>
        /// <param name="iD">iD.</param>
        /// <param name="referenceNumber">referenceNumber.</param>
        /// <param name="title">title.</param>
        /// <param name="status">status.</param>
        /// <param name="uri">uri.</param>
        /// <param name="standardPageUri">standardPageUri.</param>
        /// <param name="overviewOfRole">overviewOfRole.</param>
        /// <param name="level">level.</param>
        /// <param name="duration">duration.</param>
        /// <param name="maxFunding">maxFunding.</param>
        /// <param name="category">category.</param>
        /// <param name="keywords">keywords.</param>
        /// <param name="jobRoles">jobRoles.</param>
        /// <param name="entryRequirements">entryRequirements.</param>
        /// <param name="qualifications">qualifications.</param>
        /// <param name="whatApprenticesWillLearn">whatApprenticesWillLearn.</param>
        /// <param name="occupationalStandardUrl">occupationalStandardUrl.</param>
        /// <param name="assessmentPlanUrl">assessmentPlanUrl.</param>
        /// <param name="typicalLength">typicalLength.</param>
        /// <param name="ssa1">ssa1.</param>
        /// <param name="ssa2">ssa2.</param>
        /// <param name="version">version.</param>
        /// <param name="route">route.</param>
        /// <param name="standardInformation">standardInformation.</param>
        /// <param name="createdDate">createdDate.</param>
        /// <param name="lastUpdated">lastUpdated.</param>
        /// <param name="approvedForDelivery">approvedForDelivery.</param>
        public TempApprenticeshipStandard(int iD = default(int), string referenceNumber = default(string), string title = default(string), string status = default(string), string uri = default(string), string standardPageUri = default(string), string overviewOfRole = default(string), int level = default(int), int duration = default(int), int maxFunding = default(int), string category = default(string), List<string> keywords = default(List<string>), List<string> jobRoles = default(List<string>), string entryRequirements = default(string), string qualifications = default(string), string whatApprenticesWillLearn = default(string), string occupationalStandardUrl = default(string), string assessmentPlanUrl = default(string), TypicalLength typicalLength = default(TypicalLength), string ssa1 = default(string), string ssa2 = default(string), string version = default(string), string route = default(string), string standardInformation = default(string), DateTime? createdDate = default(DateTime?), DateTime? lastUpdated = default(DateTime?), DateTime? approvedForDelivery = default(DateTime?))
        {
            this.ID = iD;
            this.ReferenceNumber = referenceNumber;
            this.Title = title;
            this.Status = status;
            this.Uri = uri;
            this.StandardPageUri = standardPageUri;
            this.OverviewOfRole = overviewOfRole;
            this.Level = level;
            this.Duration = duration;
            this.MaxFunding = maxFunding;
            this.Category = category;
            this.Keywords = keywords;
            this.JobRoles = jobRoles;
            this.EntryRequirements = entryRequirements;
            this.Qualifications = qualifications;
            this.WhatApprenticesWillLearn = whatApprenticesWillLearn;
            this.OccupationalStandardUrl = occupationalStandardUrl;
            this.AssessmentPlanUrl = assessmentPlanUrl;
            this.TypicalLength = typicalLength;
            this.Ssa1 = ssa1;
            this.Ssa2 = ssa2;
            this.Version = version;
            this.Route = route;
            this.StandardInformation = standardInformation;
            this.CreatedDate = createdDate;
            this.LastUpdated = lastUpdated;
            this.ApprovedForDelivery = approvedForDelivery;
        }
        
        /// <summary>
        /// Gets or Sets ID
        /// </summary>
        [DataMember(Name="ID", EmitDefaultValue=false)]
        public int ID { get; set; }

        /// <summary>
        /// Gets or Sets ReferenceNumber
        /// </summary>
        [DataMember(Name="ReferenceNumber", EmitDefaultValue=false)]
        public string ReferenceNumber { get; set; }

        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [DataMember(Name="Title", EmitDefaultValue=false)]
        public string Title { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="Status", EmitDefaultValue=false)]
        public string Status { get; set; }

        /// <summary>
        /// Gets or Sets Uri
        /// </summary>
        [DataMember(Name="Uri", EmitDefaultValue=false)]
        public string Uri { get; set; }

        /// <summary>
        /// Gets or Sets StandardPageUri
        /// </summary>
        [DataMember(Name="StandardPageUri", EmitDefaultValue=false)]
        public string StandardPageUri { get; set; }

        /// <summary>
        /// Gets or Sets OverviewOfRole
        /// </summary>
        [DataMember(Name="OverviewOfRole", EmitDefaultValue=false)]
        public string OverviewOfRole { get; set; }

        /// <summary>
        /// Gets or Sets Level
        /// </summary>
        [DataMember(Name="Level", EmitDefaultValue=false)]
        public int Level { get; set; }

        /// <summary>
        /// Gets or Sets Duration
        /// </summary>
        [DataMember(Name="Duration", EmitDefaultValue=false)]
        public int Duration { get; set; }

        /// <summary>
        /// Gets or Sets MaxFunding
        /// </summary>
        [DataMember(Name="MaxFunding", EmitDefaultValue=false)]
        public int MaxFunding { get; set; }

        /// <summary>
        /// Gets or Sets Category
        /// </summary>
        [DataMember(Name="Category", EmitDefaultValue=false)]
        public string Category { get; set; }

        /// <summary>
        /// Gets or Sets Keywords
        /// </summary>
        [DataMember(Name="Keywords", EmitDefaultValue=false)]
        public List<string> Keywords { get; set; }

        /// <summary>
        /// Gets or Sets JobRoles
        /// </summary>
        [DataMember(Name="JobRoles", EmitDefaultValue=false)]
        public List<string> JobRoles { get; set; }

        /// <summary>
        /// Gets or Sets EntryRequirements
        /// </summary>
        [DataMember(Name="EntryRequirements", EmitDefaultValue=false)]
        public string EntryRequirements { get; set; }

        /// <summary>
        /// Gets or Sets Qualifications
        /// </summary>
        [DataMember(Name="Qualifications", EmitDefaultValue=false)]
        public string Qualifications { get; set; }

        /// <summary>
        /// Gets or Sets WhatApprenticesWillLearn
        /// </summary>
        [DataMember(Name="WhatApprenticesWillLearn", EmitDefaultValue=false)]
        public string WhatApprenticesWillLearn { get; set; }

        /// <summary>
        /// Gets or Sets OccupationalStandardUrl
        /// </summary>
        [DataMember(Name="OccupationalStandardUrl", EmitDefaultValue=false)]
        public string OccupationalStandardUrl { get; set; }

        /// <summary>
        /// Gets or Sets AssessmentPlanUrl
        /// </summary>
        [DataMember(Name="AssessmentPlanUrl", EmitDefaultValue=false)]
        public string AssessmentPlanUrl { get; set; }

        /// <summary>
        /// Gets or Sets TypicalLength
        /// </summary>
        [DataMember(Name="TypicalLength", EmitDefaultValue=false)]
        public TypicalLength TypicalLength { get; set; }

        /// <summary>
        /// Gets or Sets Ssa1
        /// </summary>
        [DataMember(Name="Ssa1", EmitDefaultValue=false)]
        public string Ssa1 { get; set; }

        /// <summary>
        /// Gets or Sets Ssa2
        /// </summary>
        [DataMember(Name="Ssa2", EmitDefaultValue=false)]
        public string Ssa2 { get; set; }

        /// <summary>
        /// Gets or Sets Version
        /// </summary>
        [DataMember(Name="Version", EmitDefaultValue=false)]
        public string Version { get; set; }

        /// <summary>
        /// Gets or Sets Route
        /// </summary>
        [DataMember(Name="Route", EmitDefaultValue=false)]
        public string Route { get; set; }

        /// <summary>
        /// Gets or Sets StandardInformation
        /// </summary>
        [DataMember(Name="StandardInformation", EmitDefaultValue=false)]
        public string StandardInformation { get; set; }

        /// <summary>
        /// Gets or Sets CreatedDate
        /// </summary>
        [DataMember(Name="CreatedDate", EmitDefaultValue=false)]
        public DateTime? CreatedDate { get; set; }

        /// <summary>
        /// Gets or Sets LastUpdated
        /// </summary>
        [DataMember(Name="LastUpdated", EmitDefaultValue=false)]
        public DateTime? LastUpdated { get; set; }

        /// <summary>
        /// Gets or Sets ApprovedForDelivery
        /// </summary>
        [DataMember(Name="ApprovedForDelivery", EmitDefaultValue=false)]
        public DateTime? ApprovedForDelivery { get; set; }

        /// <summary>
        /// Gets or Sets IsPublished
        /// </summary>
        [DataMember(Name="IsPublished", EmitDefaultValue=false)]
        public bool? IsPublished { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TempApprenticeshipStandard {\n");
            sb.Append("  ID: ").Append(ID).Append("\n");
            sb.Append("  ReferenceNumber: ").Append(ReferenceNumber).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Uri: ").Append(Uri).Append("\n");
            sb.Append("  StandardPageUri: ").Append(StandardPageUri).Append("\n");
            sb.Append("  OverviewOfRole: ").Append(OverviewOfRole).Append("\n");
            sb.Append("  Level: ").Append(Level).Append("\n");
            sb.Append("  Duration: ").Append(Duration).Append("\n");
            sb.Append("  MaxFunding: ").Append(MaxFunding).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  Keywords: ").Append(Keywords).Append("\n");
            sb.Append("  JobRoles: ").Append(JobRoles).Append("\n");
            sb.Append("  EntryRequirements: ").Append(EntryRequirements).Append("\n");
            sb.Append("  Qualifications: ").Append(Qualifications).Append("\n");
            sb.Append("  WhatApprenticesWillLearn: ").Append(WhatApprenticesWillLearn).Append("\n");
            sb.Append("  OccupationalStandardUrl: ").Append(OccupationalStandardUrl).Append("\n");
            sb.Append("  AssessmentPlanUrl: ").Append(AssessmentPlanUrl).Append("\n");
            sb.Append("  TypicalLength: ").Append(TypicalLength).Append("\n");
            sb.Append("  Ssa1: ").Append(Ssa1).Append("\n");
            sb.Append("  Ssa2: ").Append(Ssa2).Append("\n");
            sb.Append("  Version: ").Append(Version).Append("\n");
            sb.Append("  Route: ").Append(Route).Append("\n");
            sb.Append("  StandardInformation: ").Append(StandardInformation).Append("\n");
            sb.Append("  CreatedDate: ").Append(CreatedDate).Append("\n");
            sb.Append("  LastUpdated: ").Append(LastUpdated).Append("\n");
            sb.Append("  ApprovedForDelivery: ").Append(ApprovedForDelivery).Append("\n");
            sb.Append("  IsPublished: ").Append(IsPublished).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TempApprenticeshipStandard);
        }

        /// <summary>
        /// Returns true if TempApprenticeshipStandard instances are equal
        /// </summary>
        /// <param name="input">Instance of TempApprenticeshipStandard to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TempApprenticeshipStandard input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ID == input.ID ||
                    (this.ID != null &&
                    this.ID.Equals(input.ID))
                ) && 
                (
                    this.ReferenceNumber == input.ReferenceNumber ||
                    (this.ReferenceNumber != null &&
                    this.ReferenceNumber.Equals(input.ReferenceNumber))
                ) && 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.Uri == input.Uri ||
                    (this.Uri != null &&
                    this.Uri.Equals(input.Uri))
                ) && 
                (
                    this.StandardPageUri == input.StandardPageUri ||
                    (this.StandardPageUri != null &&
                    this.StandardPageUri.Equals(input.StandardPageUri))
                ) && 
                (
                    this.OverviewOfRole == input.OverviewOfRole ||
                    (this.OverviewOfRole != null &&
                    this.OverviewOfRole.Equals(input.OverviewOfRole))
                ) && 
                (
                    this.Level == input.Level ||
                    (this.Level != null &&
                    this.Level.Equals(input.Level))
                ) && 
                (
                    this.Duration == input.Duration ||
                    (this.Duration != null &&
                    this.Duration.Equals(input.Duration))
                ) && 
                (
                    this.MaxFunding == input.MaxFunding ||
                    (this.MaxFunding != null &&
                    this.MaxFunding.Equals(input.MaxFunding))
                ) && 
                (
                    this.Category == input.Category ||
                    (this.Category != null &&
                    this.Category.Equals(input.Category))
                ) && 
                (
                    this.Keywords == input.Keywords ||
                    this.Keywords != null &&
                    this.Keywords.SequenceEqual(input.Keywords)
                ) && 
                (
                    this.JobRoles == input.JobRoles ||
                    this.JobRoles != null &&
                    this.JobRoles.SequenceEqual(input.JobRoles)
                ) && 
                (
                    this.EntryRequirements == input.EntryRequirements ||
                    (this.EntryRequirements != null &&
                    this.EntryRequirements.Equals(input.EntryRequirements))
                ) && 
                (
                    this.Qualifications == input.Qualifications ||
                    (this.Qualifications != null &&
                    this.Qualifications.Equals(input.Qualifications))
                ) && 
                (
                    this.WhatApprenticesWillLearn == input.WhatApprenticesWillLearn ||
                    (this.WhatApprenticesWillLearn != null &&
                    this.WhatApprenticesWillLearn.Equals(input.WhatApprenticesWillLearn))
                ) && 
                (
                    this.OccupationalStandardUrl == input.OccupationalStandardUrl ||
                    (this.OccupationalStandardUrl != null &&
                    this.OccupationalStandardUrl.Equals(input.OccupationalStandardUrl))
                ) && 
                (
                    this.AssessmentPlanUrl == input.AssessmentPlanUrl ||
                    (this.AssessmentPlanUrl != null &&
                    this.AssessmentPlanUrl.Equals(input.AssessmentPlanUrl))
                ) && 
                (
                    this.TypicalLength == input.TypicalLength ||
                    (this.TypicalLength != null &&
                    this.TypicalLength.Equals(input.TypicalLength))
                ) && 
                (
                    this.Ssa1 == input.Ssa1 ||
                    (this.Ssa1 != null &&
                    this.Ssa1.Equals(input.Ssa1))
                ) && 
                (
                    this.Ssa2 == input.Ssa2 ||
                    (this.Ssa2 != null &&
                    this.Ssa2.Equals(input.Ssa2))
                ) && 
                (
                    this.Version == input.Version ||
                    (this.Version != null &&
                    this.Version.Equals(input.Version))
                ) && 
                (
                    this.Route == input.Route ||
                    (this.Route != null &&
                    this.Route.Equals(input.Route))
                ) && 
                (
                    this.StandardInformation == input.StandardInformation ||
                    (this.StandardInformation != null &&
                    this.StandardInformation.Equals(input.StandardInformation))
                ) && 
                (
                    this.CreatedDate == input.CreatedDate ||
                    (this.CreatedDate != null &&
                    this.CreatedDate.Equals(input.CreatedDate))
                ) && 
                (
                    this.LastUpdated == input.LastUpdated ||
                    (this.LastUpdated != null &&
                    this.LastUpdated.Equals(input.LastUpdated))
                ) && 
                (
                    this.ApprovedForDelivery == input.ApprovedForDelivery ||
                    (this.ApprovedForDelivery != null &&
                    this.ApprovedForDelivery.Equals(input.ApprovedForDelivery))
                ) && 
                (
                    this.IsPublished == input.IsPublished ||
                    (this.IsPublished != null &&
                    this.IsPublished.Equals(input.IsPublished))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ID != null)
                    hashCode = hashCode * 59 + this.ID.GetHashCode();
                if (this.ReferenceNumber != null)
                    hashCode = hashCode * 59 + this.ReferenceNumber.GetHashCode();
                if (this.Title != null)
                    hashCode = hashCode * 59 + this.Title.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.Uri != null)
                    hashCode = hashCode * 59 + this.Uri.GetHashCode();
                if (this.StandardPageUri != null)
                    hashCode = hashCode * 59 + this.StandardPageUri.GetHashCode();
                if (this.OverviewOfRole != null)
                    hashCode = hashCode * 59 + this.OverviewOfRole.GetHashCode();
                if (this.Level != null)
                    hashCode = hashCode * 59 + this.Level.GetHashCode();
                if (this.Duration != null)
                    hashCode = hashCode * 59 + this.Duration.GetHashCode();
                if (this.MaxFunding != null)
                    hashCode = hashCode * 59 + this.MaxFunding.GetHashCode();
                if (this.Category != null)
                    hashCode = hashCode * 59 + this.Category.GetHashCode();
                if (this.Keywords != null)
                    hashCode = hashCode * 59 + this.Keywords.GetHashCode();
                if (this.JobRoles != null)
                    hashCode = hashCode * 59 + this.JobRoles.GetHashCode();
                if (this.EntryRequirements != null)
                    hashCode = hashCode * 59 + this.EntryRequirements.GetHashCode();
                if (this.Qualifications != null)
                    hashCode = hashCode * 59 + this.Qualifications.GetHashCode();
                if (this.WhatApprenticesWillLearn != null)
                    hashCode = hashCode * 59 + this.WhatApprenticesWillLearn.GetHashCode();
                if (this.OccupationalStandardUrl != null)
                    hashCode = hashCode * 59 + this.OccupationalStandardUrl.GetHashCode();
                if (this.AssessmentPlanUrl != null)
                    hashCode = hashCode * 59 + this.AssessmentPlanUrl.GetHashCode();
                if (this.TypicalLength != null)
                    hashCode = hashCode * 59 + this.TypicalLength.GetHashCode();
                if (this.Ssa1 != null)
                    hashCode = hashCode * 59 + this.Ssa1.GetHashCode();
                if (this.Ssa2 != null)
                    hashCode = hashCode * 59 + this.Ssa2.GetHashCode();
                if (this.Version != null)
                    hashCode = hashCode * 59 + this.Version.GetHashCode();
                if (this.Route != null)
                    hashCode = hashCode * 59 + this.Route.GetHashCode();
                if (this.StandardInformation != null)
                    hashCode = hashCode * 59 + this.StandardInformation.GetHashCode();
                if (this.CreatedDate != null)
                    hashCode = hashCode * 59 + this.CreatedDate.GetHashCode();
                if (this.LastUpdated != null)
                    hashCode = hashCode * 59 + this.LastUpdated.GetHashCode();
                if (this.ApprovedForDelivery != null)
                    hashCode = hashCode * 59 + this.ApprovedForDelivery.GetHashCode();
                if (this.IsPublished != null)
                    hashCode = hashCode * 59 + this.IsPublished.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
