/* 
 * IfA Standards API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Ifa.Api.Client.OpenAPIDateConverter;

namespace Ifa.Api.Model
{
    /// <summary>
    /// ApiProfessionalRecognition
    /// </summary>
    [DataContract]
    public partial class ApiProfessionalRecognition :  IEquatable<ApiProfessionalRecognition>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ApiProfessionalRecognition" /> class.
        /// </summary>
        /// <param name="bodyName">bodyName.</param>
        /// <param name="level">level.</param>
        public ApiProfessionalRecognition(string bodyName = default(string), string level = default(string))
        {
            this.BodyName = bodyName;
            this.Level = level;
        }
        
        /// <summary>
        /// Gets or Sets BodyName
        /// </summary>
        [DataMember(Name="bodyName", EmitDefaultValue=false)]
        public string BodyName { get; set; }

        /// <summary>
        /// Gets or Sets Level
        /// </summary>
        [DataMember(Name="level", EmitDefaultValue=false)]
        public string Level { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ApiProfessionalRecognition {\n");
            sb.Append("  BodyName: ").Append(BodyName).Append("\n");
            sb.Append("  Level: ").Append(Level).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ApiProfessionalRecognition);
        }

        /// <summary>
        /// Returns true if ApiProfessionalRecognition instances are equal
        /// </summary>
        /// <param name="input">Instance of ApiProfessionalRecognition to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ApiProfessionalRecognition input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.BodyName == input.BodyName ||
                    (this.BodyName != null &&
                    this.BodyName.Equals(input.BodyName))
                ) && 
                (
                    this.Level == input.Level ||
                    (this.Level != null &&
                    this.Level.Equals(input.Level))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.BodyName != null)
                    hashCode = hashCode * 59 + this.BodyName.GetHashCode();
                if (this.Level != null)
                    hashCode = hashCode * 59 + this.Level.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
