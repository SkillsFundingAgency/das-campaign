/* 
 * IfA Standards API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Ifa.Api.Client.SwaggerDateConverter;

namespace Ifa.Api.Model
{
    /// <summary>
    /// ApprenticeshipStandardSummary
    /// </summary>
    [DataContract]
    public partial class ApprenticeshipStandardSummary :  IEquatable<ApprenticeshipStandardSummary>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ApprenticeshipStandardSummary" /> class.
        /// </summary>
        /// <param name="iD">iD.</param>
        /// <param name="uri">uri.</param>
        /// <param name="title">title.</param>
        /// <param name="duration">duration.</param>
        /// <param name="maxFunding">maxFunding.</param>
        /// <param name="level">level.</param>
        /// <param name="ssa1">ssa1.</param>
        /// <param name="ssa2">ssa2.</param>
        /// <param name="publishedDate">publishedDate.</param>
        public ApprenticeshipStandardSummary(int? iD = default(int?), string uri = default(string), string title = default(string), int? duration = default(int?), int? maxFunding = default(int?), int? level = default(int?), string ssa1 = default(string), string ssa2 = default(string), DateTime? publishedDate = default(DateTime?))
        {
            this.ID = iD;
            this.Uri = uri;
            this.Title = title;
            this.Duration = duration;
            this.MaxFunding = maxFunding;
            this.Level = level;
            this.Ssa1 = ssa1;
            this.Ssa2 = ssa2;
            this.PublishedDate = publishedDate;
        }
        
        /// <summary>
        /// Gets or Sets ID
        /// </summary>
        [DataMember(Name="ID", EmitDefaultValue=false)]
        public int? ID { get; set; }

        /// <summary>
        /// Gets or Sets Uri
        /// </summary>
        [DataMember(Name="Uri", EmitDefaultValue=false)]
        public string Uri { get; set; }

        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [DataMember(Name="Title", EmitDefaultValue=false)]
        public string Title { get; set; }

        /// <summary>
        /// Gets or Sets Duration
        /// </summary>
        [DataMember(Name="Duration", EmitDefaultValue=false)]
        public int? Duration { get; set; }

        /// <summary>
        /// Gets or Sets MaxFunding
        /// </summary>
        [DataMember(Name="MaxFunding", EmitDefaultValue=false)]
        public int? MaxFunding { get; set; }

        /// <summary>
        /// Gets or Sets Level
        /// </summary>
        [DataMember(Name="Level", EmitDefaultValue=false)]
        public int? Level { get; set; }

        /// <summary>
        /// Gets or Sets Ssa1
        /// </summary>
        [DataMember(Name="Ssa1", EmitDefaultValue=false)]
        public string Ssa1 { get; set; }

        /// <summary>
        /// Gets or Sets Ssa2
        /// </summary>
        [DataMember(Name="Ssa2", EmitDefaultValue=false)]
        public string Ssa2 { get; set; }

        /// <summary>
        /// Gets or Sets PublishedDate
        /// </summary>
        [DataMember(Name="PublishedDate", EmitDefaultValue=false)]
        public DateTime? PublishedDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ApprenticeshipStandardSummary {\n");
            sb.Append("  ID: ").Append(ID).Append("\n");
            sb.Append("  Uri: ").Append(Uri).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Duration: ").Append(Duration).Append("\n");
            sb.Append("  MaxFunding: ").Append(MaxFunding).Append("\n");
            sb.Append("  Level: ").Append(Level).Append("\n");
            sb.Append("  Ssa1: ").Append(Ssa1).Append("\n");
            sb.Append("  Ssa2: ").Append(Ssa2).Append("\n");
            sb.Append("  PublishedDate: ").Append(PublishedDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ApprenticeshipStandardSummary);
        }

        /// <summary>
        /// Returns true if ApprenticeshipStandardSummary instances are equal
        /// </summary>
        /// <param name="input">Instance of ApprenticeshipStandardSummary to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ApprenticeshipStandardSummary input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ID == input.ID ||
                    (this.ID != null &&
                    this.ID.Equals(input.ID))
                ) && 
                (
                    this.Uri == input.Uri ||
                    (this.Uri != null &&
                    this.Uri.Equals(input.Uri))
                ) && 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) && 
                (
                    this.Duration == input.Duration ||
                    (this.Duration != null &&
                    this.Duration.Equals(input.Duration))
                ) && 
                (
                    this.MaxFunding == input.MaxFunding ||
                    (this.MaxFunding != null &&
                    this.MaxFunding.Equals(input.MaxFunding))
                ) && 
                (
                    this.Level == input.Level ||
                    (this.Level != null &&
                    this.Level.Equals(input.Level))
                ) && 
                (
                    this.Ssa1 == input.Ssa1 ||
                    (this.Ssa1 != null &&
                    this.Ssa1.Equals(input.Ssa1))
                ) && 
                (
                    this.Ssa2 == input.Ssa2 ||
                    (this.Ssa2 != null &&
                    this.Ssa2.Equals(input.Ssa2))
                ) && 
                (
                    this.PublishedDate == input.PublishedDate ||
                    (this.PublishedDate != null &&
                    this.PublishedDate.Equals(input.PublishedDate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ID != null)
                    hashCode = hashCode * 59 + this.ID.GetHashCode();
                if (this.Uri != null)
                    hashCode = hashCode * 59 + this.Uri.GetHashCode();
                if (this.Title != null)
                    hashCode = hashCode * 59 + this.Title.GetHashCode();
                if (this.Duration != null)
                    hashCode = hashCode * 59 + this.Duration.GetHashCode();
                if (this.MaxFunding != null)
                    hashCode = hashCode * 59 + this.MaxFunding.GetHashCode();
                if (this.Level != null)
                    hashCode = hashCode * 59 + this.Level.GetHashCode();
                if (this.Ssa1 != null)
                    hashCode = hashCode * 59 + this.Ssa1.GetHashCode();
                if (this.Ssa2 != null)
                    hashCode = hashCode * 59 + this.Ssa2.GetHashCode();
                if (this.PublishedDate != null)
                    hashCode = hashCode * 59 + this.PublishedDate.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
