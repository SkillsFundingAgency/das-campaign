@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
@using Microsoft.AspNetCore.Http
@using Sfa.Das.Sas.ApplicationServices.Responses
@using Sfa.Das.Sas.Shared.Components.ViewModels.Css.Interfaces
@using Sfa.Das.Sas.Shared.Components.ViewModels.TrainingProvider.Search
@model Sfa.Das.Sas.Shared.Components.ViewModels.SearchResultsViewModel<Sfa.Das.Sas.Shared.Components.ViewModels.TrainingProvider.SearchResults.TrainingProviderSearchResultsItem, Sfa.Das.Sas.Shared.Components.ViewModels.TrainingProvider.Search.TrainingProviderSearchViewModel>
@inject ICssViewModel CssViewModel


@if (!ViewData.ModelState.IsValid)
{
    @await Component.InvokeAsync("TrainingProviderSearch", new { apprenticeshipId = Model.SearchQuery.ApprenticeshipId })
}

@if (Model.TotalResults > 0 && Model.Status == ProviderSearchResponseCodes.Success)
{    

    var currentRecordLower = ((Model.SearchQuery.Page - 1) * Model.SearchQuery.ResultsToTake) + 1;
    var currentRecordUpper = Model.TotalResults;

    if (Model.TotalResults > Model.SearchQuery.ResultsToTake && Model.SearchQuery.Page != Model.LastPage) {
        currentRecordUpper = Model.SearchQuery.Page * Model.SearchQuery.ResultsToTake;
    }

    <div id="resultsSummary" class="fiu-results-summary">
        <p class="fiu-results-summary__content">
            Showing 
            <b>@currentRecordLower - @currentRecordUpper</b> of 
            <b id="fat-search-result-count">@Model.TotalResults</b> training providers
        </p>
    </div>

    <form asp-controller="Basket" asp-action="AddProviderFromResults" method="post">
        <input type="hidden" asp-for="@Model.SearchQuery.ApprenticeshipId" />
        <input type="hidden" asp-for="@Model.SearchQuery.IsLevyPayer" />
        <input type="hidden" asp-for="@Model.SearchQuery.NationalProvidersOnly" />
        <input type="hidden" asp-for="@Model.SearchQuery.Page" />
        <input type="hidden" asp-for="@Model.SearchQuery.Postcode" />
        <input type="hidden" asp-for="@Model.SearchQuery.SortOrder" />
        
            @foreach (var result in Model.SearchResults)
            {
                var itemModel = Tuple.Create(result, Model.SearchQuery);
                <partial name="Components/TrainingProvider/SearchResults/_searchResultsItem" for="@itemModel" />
            }
        
    </form>
}
else
{
    <div class="fiu-results-summary">
        <p class="fiu-results-summary__content">Sorry, there is currently no training providers for <b id="fat-search-result-keyword">@Model.SearchQuery.Postcode</b>.</p>
    </div>
}

@if (Model.TotalResults >= (Model.SearchQuery.ResultsToTake * Model.SearchQuery.Page))
{
    <nav role="navigation" aria-label="Pagination">
        <ul class="fiu-pagination">
         
            @if (Model.SearchQuery.Page > 1)
            {
                <li class="fiu-pagination__item fiu-pagination__item--prev">
                    <a class="fiu-pagination__link fiu-link--employers" id="link-pagination-previous" href="@await GetPaginationBackLinkHref(Model.SearchQuery.Page, Model.SearchQuery, Context.Request.Query)">Previous</a>
                </li>
            }

            @if (Model.SearchQuery.Page < Model.LastPage)
            {
                <li class="fiu-pagination__item fiu-pagination__item--next">
                    <a class="fiu-pagination__link fiu-link--employers" id="link-pagination-apprentice-next" href="@await GetPaginationNextLinkHref(Model.SearchQuery.Page,Model.SearchQuery, Context.Request.Query)">Next</a>
                </li>
            }

        </ul>
    </nav>
}


@functions
{

    Task<string> GetPaginationBackLinkHref(int currentPage, TrainingProviderSearchViewModel item, IQueryCollection routeData)
    {
        var href = BuildPaginationQuery(currentPage - 1, item, routeData);
        return Task.FromResult(href);
    }

    Task<string> GetPaginationNextLinkHref(int currentPage, TrainingProviderSearchViewModel item, IQueryCollection routeData)
    {
        var href = BuildPaginationQuery(currentPage + 1, item, routeData);
        return Task.FromResult(href);
    }

    private string BuildPaginationQuery(int page, TrainingProviderSearchViewModel item, IQueryCollection routeData)
    {
        var path = this.ViewContext.HttpContext.Request.Path;

        var href = $"{path}?Postcode={item.Postcode}&Page={page}&ApprenticeshipId={item.ApprenticeshipId}&IsLevyPayer={item.IsLevyPayer}";


        if (!String.IsNullOrWhiteSpace(routeData["NationalProvidersOnly"].ToString()))
        {
            href = href + $"&NationalProvidersOnly={routeData["NationalProvidersOnly"]}";
        }

        var deliveryModes = routeData["DeliveryModes"].ToString();

        if (!String.IsNullOrWhiteSpace(deliveryModes))
        {
            if (deliveryModes.Contains(","))
            {
                href = href + $"&DeliveryModes=" + string.Join("&DeliveryModes=", deliveryModes.Split(','));
            }
            else
            {
                href = href + $"&DeliveryModes={deliveryModes}";
            }

        }

        return href;
    }
}