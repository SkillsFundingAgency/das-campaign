@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
@using Microsoft.AspNetCore.Http
@using Sfa.Das.Sas.ApplicationServices.Commands
@model Sfa.Das.Sas.Shared.Components.ViewModels.Fat.SearchResults.FatSearchResultsViewModel

@if (Model.TotalResults > 0)
{  
    @if (Model.SearchQuery.AddRemoveBasketResponse != null)
    {
            @if (Model.SearchQuery.AddRemoveBasketResponse.BasketOperation == BasketOperation.Added)
            {
                <div class="toast">
                    <span class="toast__icon toast__icon--success"></span>
                    <div class="toast__content">
                        You've added <strong>@Model.SearchQuery.AddRemoveBasketResponse.ApprenticeshipName</strong> to your shortlist
                    </div>
                </div>
            }
            else
            {
                <div class="toast">
                    <span class="toast__icon toast__icon--error"></span>
                    <div class="toast__content">
                        You've removed <strong>@Model.SearchQuery.AddRemoveBasketResponse.ApprenticeshipName</strong> from your shortlist
                    </div>
                </div>
            }
    }
    
    @if (Model.IsAllSearch)
    {
        <p class="govuk-heading-m">All apprenticeships</p>
    }
    else
    {
        var currentRecordLower = ((Model.SearchQuery.Page - 1) * Model.SearchQuery.ResultsToTake) + 1;
        var currentRecordUpper = Model.TotalResults;

        if (Model.TotalResults > Model.SearchQuery.ResultsToTake && Model.SearchQuery.Page != Model.LastPage) {
            currentRecordUpper = Model.SearchQuery.Page * Model.SearchQuery.ResultsToTake;
        }

        <div id="resultsSummary" class="fiu-results-summary">
            <p class="fiu-results-summary__content">
                Showing 
                <b>@currentRecordLower - @currentRecordUpper</b> of 
                <b id="fat-search-result-count">@Model.TotalResults</b> apprenticeships
            </p>
        </div>
    }

    <form asp-controller="Basket" asp-action="AddApprenticeshipFromResults" method="post">
        <input type="hidden" asp-for="@Model.SearchQuery.Keywords" />
        <input type="hidden" asp-for="@Model.SearchQuery.Page" />
        <input type="hidden" asp-for="@Model.SearchQuery.SortOrder" />
        <input type="hidden" asp-for="@Model.SearchQuery.ResultsToTake" />
        @for (int i = 0; i < Model.SearchQuery.SelectedLevels.Count; i++)
        {
            
            <input type="hidden" asp-for="@Model.SearchQuery.SelectedLevels[i]" />
        }

        @foreach (var result in Model.SearchResults)
        {
            <partial name="Components/FatSearchResults/_searchResultsItem" for="@result" />
        }
    
    </form>
}
else
{
    <div class="fiu-results-summary">
        <p class="fiu-results-summary__content">Sorry, there are currently no apprenticeships for <b id="fat-search-result-keyword">@Model.SearchQuery.Keywords</b>.</p>
    </div>
}

@if (Model.TotalResults > Model.SearchQuery.ResultsToTake)
{
    <nav role="navigation" aria-label="Pagination">
        <ul class="fiu-pagination">
         
            @if (Model.SearchQuery.Page > 1)
            {
                <li class="fiu-pagination__item fiu-pagination__item--prev">
                    <a class="fiu-pagination__link fiu-link--employers" id="link-pagination-previous" href="@await GetPaginationBackLinkHref(Model.SearchQuery.Page, Model.SearchQuery.Keywords,Context.Request.Query)">Previous</a>
                </li>
            }

            @if (Model.SearchQuery.Page < Model.LastPage)
            {
                <li class="fiu-pagination__item fiu-pagination__item--next">
                    <a class="fiu-pagination__link fiu-link--employers" id="link-pagination-apprentice-next" href="@await GetPaginationNextLinkHref(Model.SearchQuery.Page,Model.SearchQuery.Keywords,Context.Request.Query)">Next</a>
                </li>
            }

        </ul>
    </nav>
}


@functions
{

    Task<string> GetPaginationBackLinkHref(int currentPage, string keywords, IQueryCollection routeData)
    {
        var href = BuildPaginationQuery(currentPage - 1, keywords, routeData);

        return Task.FromResult(href);
    }

    Task<string> GetPaginationNextLinkHref(int currentPage, string keywords, IQueryCollection routeData)
    {
        var href = BuildPaginationQuery(currentPage + 1, keywords, routeData);
        return Task.FromResult(href);
    }

    private string BuildPaginationQuery(int page, string keywords, IQueryCollection routeData)
    {
        var path = this.ViewContext.HttpContext.Request.Path;

        var href = $"{path}?keywords={keywords}&page={page}";


        if (!String.IsNullOrWhiteSpace(routeData["SortOrder"].ToString()))
        {
            href = href + $"&sortOrder={routeData["SortOrder"]}";
        }


        var selectedValues = routeData["SelectedLevels"].ToString();

        if (!String.IsNullOrWhiteSpace(selectedValues))
        {
            if (selectedValues.Contains(","))
            {
                    href = href + $"&SelectedLevels=" + string.Join("&SelectedLevels=", selectedValues.Split(','));
            }
            else
            {
                href = href + $"&SelectedLevels={selectedValues}";
            }
           
        }

        return href;
    }

}