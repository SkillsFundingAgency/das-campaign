@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
@using Microsoft.AspNetCore.Http
@using Sfa.Das.Sas.ApplicationServices.Responses
@using Sfa.Das.Sas.Shared.Components.ViewModels.Css.Interfaces
@using  Sfa.Das.Sas.Shared.Components.ViewComponents.TrainingProvider.Search;
@model Sfa.Das.Sas.Shared.Components.ViewModels.SearchResultsViewModel<Sfa.Das.Sas.Shared.Components.ViewComponents.Fat.TrainingProviderSearchResultsItem, TrainingProviderSearchViewModel>
@inject ICssViewModel CssViewModel


@if (!ViewData.ModelState.IsValid)
{
    @await Component.InvokeAsync("TrainingProviderSearch", new { apprenticeshipId = Model.SearchQuery.ApprenticeshipId })
}

@if (Model.TotalResults > 0 && Model.Status == ProviderSearchResponseCodes.Success)
{    
     <div class="das-search-results__header">
        <p class="das-search-results__header-results-header-text">
            We've found <strong class="bold" id="fat-tp-search-result-count">@Model.TotalResults</strong> training providers for this apprenticeship. Results are sorted by distance from '<strong class="bold" id="fat-tp-from-postcode">@Model.SearchQuery.Postcode</strong>'.
        </p>
    </div>
    <form asp-controller="Basket" asp-action="AddProviderFromResults" method="post">
        <input type="hidden" asp-for="@Model.SearchQuery.ApprenticeshipId" />
        <input type="hidden" asp-for="@Model.SearchQuery.IsLevyPayer" />
        <input type="hidden" asp-for="@Model.SearchQuery.NationalProvidersOnly" />
        <input type="hidden" asp-for="@Model.SearchQuery.Page" />
        <input type="hidden" asp-for="@Model.SearchQuery.Postcode" />
        <input type="hidden" asp-for="@Model.SearchQuery.SortOrder" />
        <ol class="@CssViewModel.SearchList">
            @foreach (var result in Model.SearchResults)
            {
                var itemModel = Tuple.Create(result, Model.SearchQuery);
                <partial name="Components/TrainingProvider/SearchResults/_searchResultsItem" for="@itemModel" />
            }
        </ol>
    </form>
}
else
{
    <p>Sorry, there is currently no training providers for '<span class="@CssViewModel.UtilitiesCss.FontWeightBold">@Model.SearchQuery.Postcode</span>'.</p>

    <h3 class="@CssViewModel.HeadingSmall">Try a different postcode</h3>
}

@if (Model.TotalResults >= (Model.SearchQuery.ResultsToTake * Model.SearchQuery.Page))
{

    <ul class="das-pagination das-pagination--employer">

        <li class="das-pagination__list-item">
            @if (Model.SearchQuery.Page > 1)
            {
                <a class="das-pagination__link das-pagination__link--previous" id="link-pagination-previous" href="@await GetPaginationBackLinkHref(Model.SearchQuery.Page, Model.SearchQuery, Context.Request.Query)">Previous page <span class="das-pagination__caption">@(Model.SearchQuery.Page - 1) of @Model.LastPage</span></a>
            }
        </li>


        @if (Model.SearchQuery.Page < Model.LastPage)
        {
            <li class="das-pagination__list-item">
                <a class="das-pagination__link das-pagination__link--next" id="link-pagination-apprentice-next" href="@await GetPaginationNextLinkHref(Model.SearchQuery.Page,Model.SearchQuery, Context.Request.Query)">Next page <span class="das-pagination__caption">@(Model.SearchQuery.Page + 1) of @Model.LastPage</span></a>
            </li>
        }

    </ul>
}


@functions
{

    Task<string> GetPaginationBackLinkHref(int currentPage, TrainingProviderSearchViewModel item, IQueryCollection routeData)
    {
        var href = BuildPaginationQuery(currentPage - 1, item, routeData);
        return Task.FromResult(href);
    }

    Task<string> GetPaginationNextLinkHref(int currentPage, TrainingProviderSearchViewModel item, IQueryCollection routeData)
    {
        var href = BuildPaginationQuery(currentPage + 1, item, routeData);
        return Task.FromResult(href);
    }

    private string BuildPaginationQuery(int page, TrainingProviderSearchViewModel item, IQueryCollection routeData)
    {
        var path = this.ViewContext.HttpContext.Request.Path;

        var href = $"{path}?Postcode={item.Postcode}&Page={page}&ApprenticeshipId={item.ApprenticeshipId}&IsLevyPayer={item.IsLevyPayer}";


        if (!String.IsNullOrWhiteSpace(routeData["NationalProvidersOnly"].ToString()))
        {
            href = href + $"&NationalProvidersOnly={routeData["NationalProvidersOnly"]}";
        }

        var deliveryModes = routeData["DeliveryModes"].ToString();

        if (!String.IsNullOrWhiteSpace(deliveryModes))
        {
            if (deliveryModes.Contains(","))
            {
                href = href + $"&DeliveryModes=" + string.Join("&DeliveryModes=", deliveryModes.Split(','));
            }
            else
            {
                href = href + $"&DeliveryModes={deliveryModes}";
            }

        }

        return href;
    }
}