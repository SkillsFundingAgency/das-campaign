@using Sfa.Das.Sas.Shared.Components.ViewModels.Css.Interfaces
@model Tuple<Sfa.Das.Sas.Shared.Components.ViewComponents.Fat.TrainingProviderSearchResultsItem, Sfa.Das.Sas.Shared.Components.ViewComponents.TrainingProvider.Search.TrainingProviderSearchViewModel>
@inject ICssViewModel CssViewModel
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers

@{
    var defaultDistanceText = Model.Item1.Distance + " miles away";
    var distanceText = Model.Item1.HasOtherLocations ? defaultDistanceText + " - Available at other locations" : defaultDistanceText;
}

<li id="@Model.Item1.Ukprn" class="das-search-results__list-item">
    <article class="das-search-result">
        <h2 class="@CssViewModel.HeadingMedium @CssViewModel.UtilitiesCss.Margin("bottom",0)">
            <a class="@CssViewModel.Link" href="/TrainingProvider/Details?ukprn=@Model.Item1.Ukprn&apprenticeshipId=@Model.Item2.ApprenticeshipId&LocationId=@Model.Item1.LocationId&postCode=@Model.Item2.Postcode">@Model.Item1.Name</a>
            @if (Model.Item1.NationalProvider)
            {
                <span class="das-tag--national">National</span>
            }
        </h2>

        <dl class="@CssViewModel.List  das-search-result__details">
            <dt class="das-search-result__details-title">Distance:</dt>
            <dd class="das-search-result__details-definition">@distanceText</dd>
            @if (!string.IsNullOrWhiteSpace(Model.Item1.LocationAddress.AddressWithoutPostCode))
            {
                <dt class="das-search-result__details-definition vh">Address</dt>
                <dd class="das-search-result__details-definition">
                    <div class="das-search-result__address">
                        <span class="das-search-result__address-icon"></span>@Model.Item1.LocationAddress.AddressWithoutPostCode, <strong>@Model.Item1.LocationAddress.PostCode</strong>
                    </div>
                </dd>
            }
            <dt class="das-search-result__details-title">Employer satisfaction:</dt>
            <dd class="das-search-result__details-definition">@FormatPercentageValues(Model.Item1.EmployerSatisfaction)</dd>
            <dt class="das-search-result__details-title">Learner satisfaction:</dt>
            <dd class="das-search-result__details-definition">@FormatPercentageValues(Model.Item1.LearnerSatisfaction)</dd>
            <dt class="das-search-result__details-title">Achievement rate:</dt>
            <dd class="das-search-result__details-definition">@FormatPercentageValues(Model.Item1.OverallAchievementRate)</dd>
        </dl>

        @await Component.InvokeAsync("AddOrRemoveFromBasket", new { apprenticeshipId = Model.Item2.ApprenticeshipId, ukprn = Model.Item1.Ukprn, locationId = Model.Item1.LocationId })
    </article>
</li>



@functions
{
    string FormatPercentageValues(double? value)
    {
        if (!value.HasValue)
            return "no data available";

        return value.Value + "%";
    }
}