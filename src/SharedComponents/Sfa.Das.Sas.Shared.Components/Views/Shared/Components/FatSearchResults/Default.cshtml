@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
@using Microsoft.AspNetCore.Http
@using Sfa.Das.Sas.ApplicationServices.Commands
@using Sfa.Das.Sas.Shared.Components.ViewModels.Css.Interfaces
@model Sfa.Das.Sas.Shared.Components.ViewComponents.Fat.FatSearchResultsViewModel
@inject ICssViewModel CssViewModel

@if (Model.TotalResults > 0)
{
    
    @if (Model.SearchQuery.AddRemoveBasketResponse != null)
    {
            @if (Model.SearchQuery.AddRemoveBasketResponse.BasketOperation == BasketOperation.Added)
            {
                <div class="toast">
                    <span class="toast__icon toast__icon--success"></span>
                    <div class="toast__content">
                        You've added <strong>@Model.SearchQuery.AddRemoveBasketResponse.ApprenticeshipName</strong> to your shortlist
                    </div>
                </div>
            }
            else
            {
                <div class="toast">
                    <span class="toast__icon toast__icon--error"></span>
                    <div class="toast__content">
                        You've removed <strong>@Model.SearchQuery.AddRemoveBasketResponse.ApprenticeshipName</strong> from your shortlist
                    </div>
                </div>
            }
    }
    
    <div class="das-search-results__header">
    @if (Model.IsAllSearch)
    {
        <p class="das-search-results__header-results-header-text">All apprenticeships</p>
    }
    else
    {
        <p class="das-search-results__header-results-header-text">
            There are 
            <strong class="bold" id="fat-search-result-count">@Model.TotalResults</strong> 
            apprenticeships 
            <span class="@(CssViewModel.VisuallyHidden)">matching your search for <strong class="bold" id="fat-search-result-keyword">@Model.SearchQuery.Keywords</strong></span>
        </p>
    }
        <partial name="Components/FatSearchResults/_searchResultsSort" for="@Model.SearchQuery" />
    </div>

    <form asp-controller="Basket" asp-action="AddApprenticeshipFromResults" method="post">
        <input type="hidden" asp-for="@Model.SearchQuery.Keywords" />
        <input type="hidden" asp-for="@Model.SearchQuery.Page" />
        <input type="hidden" asp-for="@Model.SearchQuery.SortOrder" />
        <input type="hidden" asp-for="@Model.SearchQuery.ResultsToTake" />
        @for (int i = 0; i < Model.SearchQuery.SelectedLevels.Count; i++)
        {
            
            <input type="hidden" asp-for="@Model.SearchQuery.SelectedLevels[i]" />
        }
        <ol class="@CssViewModel.SearchList das-search-results">

            @foreach (var result in Model.SearchResults)
            {
                <partial name="Components/FatSearchResults/_searchResultsItem" for="@result" />
            }
        </ol>
    </form>
}
else
{
    <p class="das-search-results__summary">Sorry, there is currently no apprenticeship training for <span class="das-search-results__summary-keyword" id="fat-search-result-keyword">@Model.SearchQuery.Keywords</span>.</p>

    <h3 class="@CssViewModel.HeadingSmall">Try a new search</h3>
    @await Component.InvokeAsync("FatSearch", new { fatSearchRoute = "/employer/find-apprenticeships" })
}

@if (Model.TotalResults > Model.SearchQuery.ResultsToTake)
{

    <ul class="das-pagination das-pagination--employer">

        <li class="das-pagination__list-item">
            @if (Model.SearchQuery.Page > 1)
            {
                <a class="das-pagination__link das-pagination__link--previous" id="link-pagination-previous" href="@await GetPaginationBackLinkHref(Model.SearchQuery.Page, Model.SearchQuery.Keywords,Context.Request.Query)">Previous page <span class="das-pagination__caption">@(Model.SearchQuery.Page - 1) of @Model.LastPage</span></a>
            }
        </li>


        @if (Model.SearchQuery.Page < Model.LastPage)
        {
            <li class="das-pagination__list-item">
                <a class="das-pagination__link das-pagination__link--next" id="link-pagination-apprentice-next" href="@await GetPaginationNextLinkHref(Model.SearchQuery.Page,Model.SearchQuery.Keywords,Context.Request.Query)">Next page <span class="das-pagination__caption">@(Model.SearchQuery.Page + 1) of @Model.LastPage</span></a>
            </li>
        }

    </ul>
}


@functions
{

    Task<string> GetPaginationBackLinkHref(int currentPage, string keywords, IQueryCollection routeData)
    {
        var href = BuildPaginationQuery(currentPage - 1, keywords, routeData);

        return Task.FromResult(href);
    }

    Task<string> GetPaginationNextLinkHref(int currentPage, string keywords, IQueryCollection routeData)
    {
        var href = BuildPaginationQuery(currentPage + 1, keywords, routeData);
        return Task.FromResult(href);
    }

    private string BuildPaginationQuery(int page, string keywords, IQueryCollection routeData)
    {
        var path = this.ViewContext.HttpContext.Request.Path;

        var href = $"{path}?keywords={keywords}&page={page}";


        if (!String.IsNullOrWhiteSpace(routeData["SortOrder"].ToString()))
        {
            href = href + $"&sortOrder={routeData["SortOrder"]}";
        }


        var selectedValues = routeData["SelectedLevels"].ToString();

        if (!String.IsNullOrWhiteSpace(selectedValues))
        {
            if (selectedValues.Contains(","))
            {
                    href = href + $"&SelectedLevels=" + string.Join("&SelectedLevels=", selectedValues.Split(','));
            }
            else
            {
                href = href + $"&SelectedLevels={selectedValues}";
            }
           
        }

        return href;
    }

}