/* 
 * Apprenticeship Programmes API
 *
 * Provides details about apprenticeship programmes, training providers and assessment organisations.
 *
 * The version of the OpenAPI document: v3
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;

namespace Sfa.Das.FatApi.Client.Model
{
    /// <summary>
    /// SFADASApprenticeshipsApiTypesV3ApprenticeshipSearchResultsItem
    /// </summary>
    [DataContract]
    public partial class SFADASApprenticeshipsApiTypesV3ApprenticeshipSearchResultsItem :  IEquatable<SFADASApprenticeshipsApiTypesV3ApprenticeshipSearchResultsItem>, IValidatableObject
    {
        /// <summary>
        /// Defines ProgrammeType
        /// </summary>
        public enum ProgrammeTypeEnum
        {
            /// <summary>
            /// Enum NUMBER_0 for value: 0
            /// </summary>
            NUMBER_0 = 0,

            /// <summary>
            /// Enum NUMBER_1 for value: 1
            /// </summary>
            NUMBER_1 = 1

        }

        /// <summary>
        /// Gets or Sets ProgrammeType
        /// </summary>
        [DataMember(Name="ProgrammeType", EmitDefaultValue=false)]
        public ProgrammeTypeEnum? ProgrammeType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SFADASApprenticeshipsApiTypesV3ApprenticeshipSearchResultsItem" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="programmeType">programmeType.</param>
        /// <param name="title">title.</param>
        /// <param name="jobRoles">jobRoles.</param>
        /// <param name="keywords">keywords.</param>
        /// <param name="level">level.</param>
        /// <param name="published">published.</param>
        /// <param name="duration">duration.</param>
        /// <param name="effectiveFrom">effectiveFrom.</param>
        /// <param name="effectiveTo">effectiveTo.</param>
        /// <param name="lastDateForNewStarts">lastDateForNewStarts.</param>
        /// <param name="frameworkName">frameworkName.</param>
        /// <param name="pathwayName">pathwayName.</param>
        public SFADASApprenticeshipsApiTypesV3ApprenticeshipSearchResultsItem(string id = default(string), ProgrammeTypeEnum? programmeType = default(ProgrammeTypeEnum?), string title = default(string), List<string> jobRoles = default(List<string>), List<string> keywords = default(List<string>), int level = default(int), bool published = default(bool), int duration = default(int), DateTime effectiveFrom = default(DateTime), DateTime effectiveTo = default(DateTime), DateTime lastDateForNewStarts = default(DateTime), string frameworkName = default(string), string pathwayName = default(string))
        {
            this.Id = id;
            this.ProgrammeType = programmeType;
            this.Title = title;
            this.JobRoles = jobRoles;
            this.Keywords = keywords;
            this.Level = level;
            this.Published = published;
            this.Duration = duration;
            this.EffectiveFrom = effectiveFrom;
            this.EffectiveTo = effectiveTo;
            this.LastDateForNewStarts = lastDateForNewStarts;
            this.FrameworkName = frameworkName;
            this.PathwayName = pathwayName;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="Id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [DataMember(Name="Title", EmitDefaultValue=false)]
        public string Title { get; set; }

        /// <summary>
        /// Gets or Sets JobRoles
        /// </summary>
        [DataMember(Name="JobRoles", EmitDefaultValue=false)]
        public List<string> JobRoles { get; set; }

        /// <summary>
        /// Gets or Sets Keywords
        /// </summary>
        [DataMember(Name="Keywords", EmitDefaultValue=false)]
        public List<string> Keywords { get; set; }

        /// <summary>
        /// Gets or Sets Level
        /// </summary>
        [DataMember(Name="Level", EmitDefaultValue=false)]
        public int Level { get; set; }

        /// <summary>
        /// Gets or Sets Published
        /// </summary>
        [DataMember(Name="Published", EmitDefaultValue=false)]
        public bool Published { get; set; }

        /// <summary>
        /// Gets or Sets Duration
        /// </summary>
        [DataMember(Name="Duration", EmitDefaultValue=false)]
        public int Duration { get; set; }

        /// <summary>
        /// Gets or Sets EffectiveFrom
        /// </summary>
        [DataMember(Name="EffectiveFrom", EmitDefaultValue=false)]
        public DateTime EffectiveFrom { get; set; }

        /// <summary>
        /// Gets or Sets EffectiveTo
        /// </summary>
        [DataMember(Name="EffectiveTo", EmitDefaultValue=false)]
        public DateTime EffectiveTo { get; set; }

        /// <summary>
        /// Gets or Sets LastDateForNewStarts
        /// </summary>
        [DataMember(Name="LastDateForNewStarts", EmitDefaultValue=false)]
        public DateTime LastDateForNewStarts { get; set; }

        /// <summary>
        /// Gets or Sets FrameworkName
        /// </summary>
        [DataMember(Name="FrameworkName", EmitDefaultValue=false)]
        public string FrameworkName { get; set; }

        /// <summary>
        /// Gets or Sets PathwayName
        /// </summary>
        [DataMember(Name="PathwayName", EmitDefaultValue=false)]
        public string PathwayName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SFADASApprenticeshipsApiTypesV3ApprenticeshipSearchResultsItem {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ProgrammeType: ").Append(ProgrammeType).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  JobRoles: ").Append(JobRoles).Append("\n");
            sb.Append("  Keywords: ").Append(Keywords).Append("\n");
            sb.Append("  Level: ").Append(Level).Append("\n");
            sb.Append("  Published: ").Append(Published).Append("\n");
            sb.Append("  Duration: ").Append(Duration).Append("\n");
            sb.Append("  EffectiveFrom: ").Append(EffectiveFrom).Append("\n");
            sb.Append("  EffectiveTo: ").Append(EffectiveTo).Append("\n");
            sb.Append("  LastDateForNewStarts: ").Append(LastDateForNewStarts).Append("\n");
            sb.Append("  FrameworkName: ").Append(FrameworkName).Append("\n");
            sb.Append("  PathwayName: ").Append(PathwayName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SFADASApprenticeshipsApiTypesV3ApprenticeshipSearchResultsItem);
        }

        /// <summary>
        /// Returns true if SFADASApprenticeshipsApiTypesV3ApprenticeshipSearchResultsItem instances are equal
        /// </summary>
        /// <param name="input">Instance of SFADASApprenticeshipsApiTypesV3ApprenticeshipSearchResultsItem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SFADASApprenticeshipsApiTypesV3ApprenticeshipSearchResultsItem input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.ProgrammeType == input.ProgrammeType ||
                    this.ProgrammeType.Equals(input.ProgrammeType)
                ) && 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) && 
                (
                    this.JobRoles == input.JobRoles ||
                    this.JobRoles != null &&
                    input.JobRoles != null &&
                    this.JobRoles.SequenceEqual(input.JobRoles)
                ) && 
                (
                    this.Keywords == input.Keywords ||
                    this.Keywords != null &&
                    input.Keywords != null &&
                    this.Keywords.SequenceEqual(input.Keywords)
                ) && 
                (
                    this.Level == input.Level ||
                    (this.Level != null &&
                    this.Level.Equals(input.Level))
                ) && 
                (
                    this.Published == input.Published ||
                    (this.Published != null &&
                    this.Published.Equals(input.Published))
                ) && 
                (
                    this.Duration == input.Duration ||
                    (this.Duration != null &&
                    this.Duration.Equals(input.Duration))
                ) && 
                (
                    this.EffectiveFrom == input.EffectiveFrom ||
                    (this.EffectiveFrom != null &&
                    this.EffectiveFrom.Equals(input.EffectiveFrom))
                ) && 
                (
                    this.EffectiveTo == input.EffectiveTo ||
                    (this.EffectiveTo != null &&
                    this.EffectiveTo.Equals(input.EffectiveTo))
                ) && 
                (
                    this.LastDateForNewStarts == input.LastDateForNewStarts ||
                    (this.LastDateForNewStarts != null &&
                    this.LastDateForNewStarts.Equals(input.LastDateForNewStarts))
                ) && 
                (
                    this.FrameworkName == input.FrameworkName ||
                    (this.FrameworkName != null &&
                    this.FrameworkName.Equals(input.FrameworkName))
                ) && 
                (
                    this.PathwayName == input.PathwayName ||
                    (this.PathwayName != null &&
                    this.PathwayName.Equals(input.PathwayName))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                hashCode = hashCode * 59 + this.ProgrammeType.GetHashCode();
                if (this.Title != null)
                    hashCode = hashCode * 59 + this.Title.GetHashCode();
                if (this.JobRoles != null)
                    hashCode = hashCode * 59 + this.JobRoles.GetHashCode();
                if (this.Keywords != null)
                    hashCode = hashCode * 59 + this.Keywords.GetHashCode();
                if (this.Level != null)
                    hashCode = hashCode * 59 + this.Level.GetHashCode();
                if (this.Published != null)
                    hashCode = hashCode * 59 + this.Published.GetHashCode();
                if (this.Duration != null)
                    hashCode = hashCode * 59 + this.Duration.GetHashCode();
                if (this.EffectiveFrom != null)
                    hashCode = hashCode * 59 + this.EffectiveFrom.GetHashCode();
                if (this.EffectiveTo != null)
                    hashCode = hashCode * 59 + this.EffectiveTo.GetHashCode();
                if (this.LastDateForNewStarts != null)
                    hashCode = hashCode * 59 + this.LastDateForNewStarts.GetHashCode();
                if (this.FrameworkName != null)
                    hashCode = hashCode * 59 + this.FrameworkName.GetHashCode();
                if (this.PathwayName != null)
                    hashCode = hashCode * 59 + this.PathwayName.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
