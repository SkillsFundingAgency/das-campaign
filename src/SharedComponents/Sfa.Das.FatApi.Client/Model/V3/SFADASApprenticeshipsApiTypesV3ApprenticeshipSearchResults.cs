/* 
 * Apprenticeship Programmes API
 *
 * Provides details about apprenticeship programmes, training providers and assessment organisations.
 *
 * The version of the OpenAPI document: v3
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;

namespace Sfa.Das.FatApi.Client.Model
{
    /// <summary>
    /// SFADASApprenticeshipsApiTypesV3ApprenticeshipSearchResults
    /// </summary>
    [DataContract]
    public partial class SFADASApprenticeshipsApiTypesV3ApprenticeshipSearchResults :  IEquatable<SFADASApprenticeshipsApiTypesV3ApprenticeshipSearchResults>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SFADASApprenticeshipsApiTypesV3ApprenticeshipSearchResults" /> class.
        /// </summary>
        /// <param name="levelAggregation">levelAggregation.</param>
        /// <param name="totalResults">totalResults.</param>
        /// <param name="pageSize">pageSize.</param>
        /// <param name="pageNumber">pageNumber.</param>
        /// <param name="results">results.</param>
        public SFADASApprenticeshipsApiTypesV3ApprenticeshipSearchResults(Dictionary<string, long> levelAggregation = default(Dictionary<string, long>), long totalResults = default(long), int pageSize = default(int), int pageNumber = default(int), List<SFADASApprenticeshipsApiTypesV3ApprenticeshipSearchResultsItem> results = default(List<SFADASApprenticeshipsApiTypesV3ApprenticeshipSearchResultsItem>))
        {
            this.LevelAggregation = levelAggregation;
            this.TotalResults = totalResults;
            this.PageSize = pageSize;
            this.PageNumber = pageNumber;
            this.Results = results;
        }
        
        /// <summary>
        /// Gets or Sets LevelAggregation
        /// </summary>
        [DataMember(Name="LevelAggregation", EmitDefaultValue=false)]
        public Dictionary<string, long> LevelAggregation { get; set; }

        /// <summary>
        /// Gets or Sets TotalResults
        /// </summary>
        [DataMember(Name="TotalResults", EmitDefaultValue=false)]
        public long TotalResults { get; set; }

        /// <summary>
        /// Gets or Sets PageSize
        /// </summary>
        [DataMember(Name="PageSize", EmitDefaultValue=false)]
        public int PageSize { get; set; }

        /// <summary>
        /// Gets or Sets PageNumber
        /// </summary>
        [DataMember(Name="PageNumber", EmitDefaultValue=false)]
        public int PageNumber { get; set; }

        /// <summary>
        /// Gets or Sets Results
        /// </summary>
        [DataMember(Name="Results", EmitDefaultValue=false)]
        public List<SFADASApprenticeshipsApiTypesV3ApprenticeshipSearchResultsItem> Results { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SFADASApprenticeshipsApiTypesV3ApprenticeshipSearchResults {\n");
            sb.Append("  LevelAggregation: ").Append(LevelAggregation).Append("\n");
            sb.Append("  TotalResults: ").Append(TotalResults).Append("\n");
            sb.Append("  PageSize: ").Append(PageSize).Append("\n");
            sb.Append("  PageNumber: ").Append(PageNumber).Append("\n");
            sb.Append("  Results: ").Append(Results).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SFADASApprenticeshipsApiTypesV3ApprenticeshipSearchResults);
        }

        /// <summary>
        /// Returns true if SFADASApprenticeshipsApiTypesV3ApprenticeshipSearchResults instances are equal
        /// </summary>
        /// <param name="input">Instance of SFADASApprenticeshipsApiTypesV3ApprenticeshipSearchResults to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SFADASApprenticeshipsApiTypesV3ApprenticeshipSearchResults input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.LevelAggregation == input.LevelAggregation ||
                    this.LevelAggregation != null &&
                    input.LevelAggregation != null &&
                    this.LevelAggregation.SequenceEqual(input.LevelAggregation)
                ) && 
                (
                    this.TotalResults == input.TotalResults ||
                    (this.TotalResults != null &&
                    this.TotalResults.Equals(input.TotalResults))
                ) && 
                (
                    this.PageSize == input.PageSize ||
                    (this.PageSize != null &&
                    this.PageSize.Equals(input.PageSize))
                ) && 
                (
                    this.PageNumber == input.PageNumber ||
                    (this.PageNumber != null &&
                    this.PageNumber.Equals(input.PageNumber))
                ) && 
                (
                    this.Results == input.Results ||
                    this.Results != null &&
                    input.Results != null &&
                    this.Results.SequenceEqual(input.Results)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.LevelAggregation != null)
                    hashCode = hashCode * 59 + this.LevelAggregation.GetHashCode();
                if (this.TotalResults != null)
                    hashCode = hashCode * 59 + this.TotalResults.GetHashCode();
                if (this.PageSize != null)
                    hashCode = hashCode * 59 + this.PageSize.GetHashCode();
                if (this.PageNumber != null)
                    hashCode = hashCode * 59 + this.PageNumber.GetHashCode();
                if (this.Results != null)
                    hashCode = hashCode * 59 + this.Results.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
