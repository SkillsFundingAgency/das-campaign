/* 
 * Apprenticeship Programmes API
 *
 * Provides details about apprenticeship programmes, training providers and assessment organisations.
 *
 * The version of the OpenAPI document: v3
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;

namespace Sfa.Das.FatApi.Client.Model
{
    /// <summary>
    /// SFADASApprenticeshipsApiTypesV3TrainingLocation
    /// </summary>
    [DataContract]
    public partial class SFADASApprenticeshipsApiTypesV3TrainingLocation :  IEquatable<SFADASApprenticeshipsApiTypesV3TrainingLocation>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SFADASApprenticeshipsApiTypesV3TrainingLocation" /> class.
        /// </summary>
        /// <param name="locationId">locationId.</param>
        /// <param name="locationName">locationName.</param>
        /// <param name="address">address.</param>
        public SFADASApprenticeshipsApiTypesV3TrainingLocation(int locationId = default(int), string locationName = default(string), SFADASApprenticeshipsApiTypesV3Address address = default(SFADASApprenticeshipsApiTypesV3Address))
        {
            this.LocationId = locationId;
            this.LocationName = locationName;
            this.Address = address;
        }
        
        /// <summary>
        /// Gets or Sets LocationId
        /// </summary>
        [DataMember(Name="LocationId", EmitDefaultValue=false)]
        public int LocationId { get; set; }

        /// <summary>
        /// Gets or Sets LocationName
        /// </summary>
        [DataMember(Name="LocationName", EmitDefaultValue=false)]
        public string LocationName { get; set; }

        /// <summary>
        /// Gets or Sets Address
        /// </summary>
        [DataMember(Name="Address", EmitDefaultValue=false)]
        public SFADASApprenticeshipsApiTypesV3Address Address { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SFADASApprenticeshipsApiTypesV3TrainingLocation {\n");
            sb.Append("  LocationId: ").Append(LocationId).Append("\n");
            sb.Append("  LocationName: ").Append(LocationName).Append("\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SFADASApprenticeshipsApiTypesV3TrainingLocation);
        }

        /// <summary>
        /// Returns true if SFADASApprenticeshipsApiTypesV3TrainingLocation instances are equal
        /// </summary>
        /// <param name="input">Instance of SFADASApprenticeshipsApiTypesV3TrainingLocation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SFADASApprenticeshipsApiTypesV3TrainingLocation input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.LocationId == input.LocationId ||
                    (this.LocationId != null &&
                    this.LocationId.Equals(input.LocationId))
                ) && 
                (
                    this.LocationName == input.LocationName ||
                    (this.LocationName != null &&
                    this.LocationName.Equals(input.LocationName))
                ) && 
                (
                    this.Address == input.Address ||
                    (this.Address != null &&
                    this.Address.Equals(input.Address))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.LocationId != null)
                    hashCode = hashCode * 59 + this.LocationId.GetHashCode();
                if (this.LocationName != null)
                    hashCode = hashCode * 59 + this.LocationName.GetHashCode();
                if (this.Address != null)
                    hashCode = hashCode * 59 + this.Address.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
