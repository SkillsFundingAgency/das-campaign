/* 
 * Apprenticeship Programmes API
 *
 * Provides details about apprenticeship programmes, training providers and assessment organisations.
 *
 * The version of the OpenAPI document: v3
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;

namespace Sfa.Das.FatApi.Client.Model
{
    /// <summary>
    /// SFADASApprenticeshipsApiTypesV3Address
    /// </summary>
    [DataContract]
    public partial class SFADASApprenticeshipsApiTypesV3Address :  IEquatable<SFADASApprenticeshipsApiTypesV3Address>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SFADASApprenticeshipsApiTypesV3Address" /> class.
        /// </summary>
        /// <param name="primary">primary.</param>
        /// <param name="secondary">secondary.</param>
        /// <param name="street">street.</param>
        /// <param name="town">town.</param>
        /// <param name="postcode">postcode.</param>
        public SFADASApprenticeshipsApiTypesV3Address(string primary = default(string), string secondary = default(string), string street = default(string), string town = default(string), string postcode = default(string))
        {
            this.Primary = primary;
            this.Secondary = secondary;
            this.Street = street;
            this.Town = town;
            this.Postcode = postcode;
        }
        
        /// <summary>
        /// Gets or Sets Primary
        /// </summary>
        [DataMember(Name="Primary", EmitDefaultValue=false)]
        public string Primary { get; set; }

        /// <summary>
        /// Gets or Sets Secondary
        /// </summary>
        [DataMember(Name="Secondary", EmitDefaultValue=false)]
        public string Secondary { get; set; }

        /// <summary>
        /// Gets or Sets Street
        /// </summary>
        [DataMember(Name="Street", EmitDefaultValue=false)]
        public string Street { get; set; }

        /// <summary>
        /// Gets or Sets Town
        /// </summary>
        [DataMember(Name="Town", EmitDefaultValue=false)]
        public string Town { get; set; }

        /// <summary>
        /// Gets or Sets Postcode
        /// </summary>
        [DataMember(Name="Postcode", EmitDefaultValue=false)]
        public string Postcode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SFADASApprenticeshipsApiTypesV3Address {\n");
            sb.Append("  Primary: ").Append(Primary).Append("\n");
            sb.Append("  Secondary: ").Append(Secondary).Append("\n");
            sb.Append("  Street: ").Append(Street).Append("\n");
            sb.Append("  Town: ").Append(Town).Append("\n");
            sb.Append("  Postcode: ").Append(Postcode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SFADASApprenticeshipsApiTypesV3Address);
        }

        /// <summary>
        /// Returns true if SFADASApprenticeshipsApiTypesV3Address instances are equal
        /// </summary>
        /// <param name="input">Instance of SFADASApprenticeshipsApiTypesV3Address to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SFADASApprenticeshipsApiTypesV3Address input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Primary == input.Primary ||
                    (this.Primary != null &&
                    this.Primary.Equals(input.Primary))
                ) && 
                (
                    this.Secondary == input.Secondary ||
                    (this.Secondary != null &&
                    this.Secondary.Equals(input.Secondary))
                ) && 
                (
                    this.Street == input.Street ||
                    (this.Street != null &&
                    this.Street.Equals(input.Street))
                ) && 
                (
                    this.Town == input.Town ||
                    (this.Town != null &&
                    this.Town.Equals(input.Town))
                ) && 
                (
                    this.Postcode == input.Postcode ||
                    (this.Postcode != null &&
                    this.Postcode.Equals(input.Postcode))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Primary != null)
                    hashCode = hashCode * 59 + this.Primary.GetHashCode();
                if (this.Secondary != null)
                    hashCode = hashCode * 59 + this.Secondary.GetHashCode();
                if (this.Street != null)
                    hashCode = hashCode * 59 + this.Street.GetHashCode();
                if (this.Town != null)
                    hashCode = hashCode * 59 + this.Town.GetHashCode();
                if (this.Postcode != null)
                    hashCode = hashCode * 59 + this.Postcode.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
